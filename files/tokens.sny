
// Paren
()
// Bracket
[]
// Brace
{}
// Dot, Comma
. ,
// Colon, Semicolon
: ;
// Hash, At
# @
// Plus, Minus
+ -
// DoublePlus, DoubleMinus
++ --
// Star
*
// Slash, Percent
/ %
// Tilde, Amp, Pipe, DoubleLeftAngle, DoubleRightAngle
~ & | ^ << >>
// Exclamation, DoubleAmp, DoublePipe
! && ||
// DoubleEqual, NotEqual, Less, Greater, LessEqual, GreaterEqual, Cmp
== != < > <= >= <>
// Equal
=
// 
+= -=
*=
/= %=
&= |= ^= <<= >>=
?


// Char
'\n'
// Int
b'a'
// String
"asd\r\n\b\t\e\0\u{32}"
$"asd"$
r"\n"
// List(Int)
b"asd"
// CString
c"asd"
// FString
f"{asd}"

// Int
123
-123
+123
00123
1_234
// BinInt
0b0000_1111
// HexInt
0xff_FF_00
// Float
1.234
0.123_456
// Scientific
1e8

// Keyword
bitset
const
class
enum
fun
interface
let
macro
mod
state
struct
type
var
arglist
as
async
await
break
case
continue
defer
else
for
gen
hidden
if
impl
in
loop
match
return
shared
takes
unsafe
use
where
while

// Ident
ident
// MacroName
ident!
// MacroVar
$ident
